(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[6533],{5889:(t,d,n)=>{"use strict";n.r(d),n.d(d,{data:()=>a});const a={key:"v-6e61f61e",path:"/guide/select.html",title:"查询",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"特别介绍 WhereDynamicFilter",slug:"特别介绍-wheredynamicfilter",children:[]},{level:2,title:"API",slug:"api",children:[]}],filePathRelative:"guide/select.md",git:{updatedTime:1614165498e3,contributors:[]}}},7358:(t,d,n)=>{"use strict";n.r(d),n.d(d,{default:()=>s});const a=(0,n(8133).uE)('<h1 id="查询"><a class="header-anchor" href="#查询">#</a> 查询</h1><p>FreeSql 在查询数据下足了功夫，链式查询语法、多表查询、表达式函数支持得非常到位。</p><ul><li>分页查询</li><li>单表查询</li><li>多表查询</li><li>分组聚合查询</li><li>返回数据</li><li>LinqToSql</li><li>仓储层 Repository</li><li>过滤器</li><li>延时加载</li><li>贪婪加载</li><li>表达式函数</li><li>读写分离</li><li>性能</li><li>分表分库</li><li>多租户</li></ul><h2 id="特别介绍-wheredynamicfilter"><a class="header-anchor" href="#特别介绍-wheredynamicfilter">#</a> 特别介绍 WhereDynamicFilter</h2><p>ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：</p><ul><li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like &#39;%xx%&#39;，或者 like &#39;xx%&#39;，或者 like &#39;%xx&#39;</li><li>Equal/NotEqual：等于/不等于</li><li>GreaterThan/GreaterThanOrEqual：大于/大于等于</li><li>LessThan/LessThanOrEqual：小于/小于等于</li><li>Range：范围查询</li><li>DateRange：日期范围，有特殊处理 value[1] + 1</li><li>Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;\n{\n  &quot;&quot;Logic&quot;&quot; : &quot;&quot;Or&quot;&quot;,\n  &quot;&quot;Filters&quot;&quot; :\n  [\n    {\n      &quot;&quot;Field&quot;&quot; : &quot;&quot;Code&quot;&quot;,\n      &quot;&quot;Operator&quot;&quot; : &quot;&quot;NotContains&quot;&quot;,\n      &quot;&quot;Value&quot;&quot; : &quot;&quot;val1&quot;&quot;,\n      &quot;&quot;Filters&quot;&quot; :\n      [\n        {\n          &quot;&quot;Field&quot;&quot; : &quot;&quot;Name&quot;&quot;,\n          &quot;&quot;Operator&quot;&quot; : &quot;&quot;NotStartsWith&quot;&quot;,\n          &quot;&quot;Value&quot;&quot; : &quot;&quot;val2&quot;&quot;,\n        }\n      ]\n    },\n    {\n      &quot;&quot;Field&quot;&quot; : &quot;&quot;Parent.Code&quot;&quot;,\n      &quot;&quot;Operator&quot;&quot; : &quot;&quot;Equals&quot;&quot;,\n      &quot;&quot;Value&quot;&quot; : &quot;&quot;val11&quot;&quot;,\n      &quot;&quot;Filters&quot;&quot; :\n      [\n        {\n          &quot;&quot;Field&quot;&quot; : &quot;&quot;Parent.Name&quot;&quot;,\n          &quot;&quot;Operator&quot;&quot; : &quot;&quot;Contains&quot;&quot;,\n          &quot;&quot;Value&quot;&quot; : &quot;&quot;val22&quot;&quot;,\n        }\n      ]\n    }\n  ]\n}\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VM_District_Parent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//SELECT a.&quot;&quot;Code&quot;&quot;, a.&quot;&quot;Name&quot;&quot;, a.&quot;&quot;ParentCode&quot;&quot;, a__Parent.&quot;&quot;Code&quot;&quot; as4, a__Parent.&quot;&quot;Name&quot;&quot; as5, a__Parent.&quot;&quot;ParentCode&quot;&quot; as6 </span>\n<span class="token comment">//FROM &quot;&quot;D_District&quot;&quot; a </span>\n<span class="token comment">//LEFT JOIN &quot;&quot;D_District&quot;&quot; a__Parent ON a__Parent.&quot;&quot;Code&quot;&quot; = a.&quot;&quot;ParentCode&quot;&quot; </span>\n<span class="token comment">//WHERE (not((a.&quot;&quot;Code&quot;&quot;) LIKE &#39;%val1%&#39;) AND not((a.&quot;&quot;Name&quot;&quot;) LIKE &#39;val2%&#39;) OR a__Parent.&quot;&quot;Code&quot;&quot; = &#39;val11&#39; AND (a__Parent.&quot;&quot;Name&quot;&quot;) LIKE &#39;%val22%&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><blockquote><p>动态排序：ISelect.OrderByPropertyName(&quot;Parent.Code&quot;)</p></blockquote><h2 id="api"><a class="header-anchor" href="#api">#</a> API</h2><table><thead><tr><th>方法</th><th>返回值</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ToSql</td><td>string</td><td></td><td>返回即将执行的SQL语句</td></tr><tr><td>ToList</td><td>List&lt;T1&gt;</td><td></td><td>执行SQL查询，返回 T1 实体所有字段的记录，若存在导航属性则一起查询返回，记录不存在时返回 Count 为 0 的列表</td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>执行SQL查询，返回指定字段的记录，记录不存在时返回 Count 为 0 的列表</td></tr><tr><td>ToList&lt;T&gt;</td><td>List&lt;T&gt;</td><td>string field</td><td>执行SQL查询，返回 field 指定字段的记录，并以元组或基础类型(int,string,long)接收，记录不存在时返回 Count 为 0 的列表</td></tr><tr><td>ToOne</td><td>T1</td><td></td><td>执行SQL查询，返回 T1 实体所有字段的第一条记录，记录不存在时返回 null</td></tr><tr><td>ToAggregate&lt;T&gt;</td><td>List&lt;T&gt;</td><td>Lambda</td><td>执行SQL查询，返回指定字段的聚合结果（适合不需要 GroupBy 的场景）</td></tr><tr><td>Any</td><td>bool</td><td></td><td>执行SQL查询，是否有记录</td></tr><tr><td>Sum</td><td>T</td><td>Lambda</td><td>指定一个列求和</td></tr><tr><td>Min</td><td>T</td><td>Lambda</td><td>指定一个列求最小值</td></tr><tr><td>Max</td><td>T</td><td>Lambda</td><td>指定一个列求最大值</td></tr><tr><td>Avg</td><td>T</td><td>Lambda</td><td>指定一个列求平均值</td></tr><tr><td>【分页】</td><td></td><td></td><td></td></tr><tr><td>Count</td><td>long</td><td></td><td>查询的记录数量</td></tr><tr><td>Count</td><td>&lt;this&gt;</td><td>out long</td><td>查询的记录数量，以参数out形式返回</td></tr><tr><td>Skip</td><td>&lt;this&gt;</td><td>int offset</td><td>查询向后偏移行数</td></tr><tr><td>Offset</td><td>&lt;this&gt;</td><td>int offset</td><td>查询向后偏移行数</td></tr><tr><td>Limit</td><td>&lt;this&gt;</td><td>int limit</td><td>查询多少条数据</td></tr><tr><td>Take</td><td>&lt;this&gt;</td><td>int limit</td><td>查询多少条数据</td></tr><tr><td>Page</td><td>&lt;this&gt;</td><td>int pageIndex, int pageSize</td><td>分页</td></tr><tr><td>【条件】</td><td></td><td></td><td></td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>Lambda</td><td>支持多表查询表达式，多次使用相当于AND</td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, Lambda</td><td>支持多表查询表达式</td></tr><tr><td>Where</td><td>&lt;this&gt;</td><td>string, parms</td><td>原生sql语法条件，Where(&quot;id = ?id&quot;, new { id = 1 })</td></tr><tr><td>WhereIf</td><td>&lt;this&gt;</td><td>bool, string, parms</td><td>原生sql语法条件，WhereIf(true, &quot;id = ?id&quot;, new { id = 1 })</td></tr><tr><td>WhereCascade</td><td>&lt;this&gt;</td><td>Lambda</td><td>实现多表查询时，向每个表中附加条件</td></tr><tr><td>WhereDynamicFilter</td><td>&lt;this&gt;</td><td>DynamicFilterInfo</td><td>动态过滤条件(与前端交互)</td></tr><tr><td>【分组】</td><td></td><td></td><td></td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>按选择的列分组，GroupBy(a =&gt; a.Name)</td></tr><tr><td>GroupBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生sql语法分组，GroupBy(&quot;concat(name, ?cc)&quot;, new { cc = 1 })</td></tr><tr><td>Having</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生sql语法聚合条件过滤，Having(&quot;count(name) = ?cc&quot;, new { cc = 1 })</td></tr><tr><td>Disdinct</td><td>&lt;this&gt;</td><td></td><td>.Distinct().ToList(x =&gt; x.GroupName) 是对指定字段</td></tr><tr><td>【排序】</td><td></td><td></td><td></td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>Lambda</td><td>按列排序，OrderBy(a =&gt; a.Time)，可多次使用</td></tr><tr><td>OrderByDescending</td><td>&lt;this&gt;</td><td>Lambda</td><td>按列倒向排序，OrderByDescending(a =&gt; a.Time)</td></tr><tr><td>OrderBy</td><td>&lt;this&gt;</td><td>string, parms</td><td>按原生sql语法排序，OrderBy(&quot;count(name) + ?cc&quot;, new { cc = 1 })</td></tr><tr><td>OrderByPropertyName</td><td>string, bool</td><td>按属性名字符串排序（支持导航属性）</td><td></td></tr><tr><td>【联表】</td><td></td><td></td><td></td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>左联查询，可使用导航属性，或指定关联的实体类型</td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>联接查询，可使用导航属性，或指定关联的实体类型</td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>Lambda</td><td>右联查询，可使用导航属性，或指定关联的实体类型</td></tr><tr><td>LeftJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>左联查询，使用原生sql语法，LeftJoin(&quot;type b on b.id = a.id and b.clicks &gt; ?clicks&quot;, new { clicks = 1 })</td></tr><tr><td>InnerJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>联接查询，使用原生sql语法，InnerJoin(&quot;type b on b.id = a.id and b.clicks &gt; ?clicks&quot;, new { clicks = 1 })</td></tr><tr><td>RightJoin</td><td>&lt;this&gt;</td><td>string, parms</td><td>右联查询，使用原生sql语法，RightJoin(&quot;type b on b.id = a.id and b.clicks &gt; ?clicks&quot;, new { clicks = 1 })</td></tr><tr><td>From</td><td>&lt;this&gt;</td><td>Lambda</td><td>多表查询，3个表以上使用非常方便，目前设计最大支持10个表</td></tr><tr><td>【其他】</td><td></td><td></td><td></td></tr><tr><td>As</td><td>&lt;this&gt;</td><td>string alias = &quot;a&quot;</td><td>指定别名</td></tr><tr><td>Master</td><td>&lt;this&gt;</td><td></td><td>指定从主库查询（默认查询从库）</td></tr><tr><td>CommandTimeout</td><td>&lt;this&gt;</td><td>int</td><td>命令超时设置(秒)</td></tr><tr><td>WithTransaction</td><td>&lt;this&gt;</td><td>DbTransaction</td><td>设置事务对象</td></tr><tr><td>WithConnection</td><td>&lt;this&gt;</td><td>DbConnection</td><td>设置连接对象</td></tr><tr><td>WithLock</td><td>&lt;this&gt;</td><td>Enum</td><td>SqlServer NoLock 等特有的设置</td></tr><tr><td>ForUpdate</td><td>&lt;this&gt;</td><td>bool</td><td>排他更新锁，对不同的数据库已作适配，详细说明见注释</td></tr><tr><td>AsQueryable</td><td>IQueryable</td><td></td><td>将 ISelect 转换为 IQueryable，此方法主要用于扩展，比如：abp IRepository GetAll() 接口方法需要返回 IQueryable 对象。注意：IQueryable 方法污染较为严重，请尽量避免此转换</td></tr><tr><td>ToTreeList()</td><td>List&lt;TEntity&gt;</td><td>无</td><td>将父子关系的数据以 TreeList 的形式返回</td></tr><tr><td>AsTreeCte()</td><td>ISelect</td><td>(up, pathSelector, level)</td><td>递归查询父子关系表</td></tr></tbody></table>',10),s={render:function(t,d){return a}}}}]);