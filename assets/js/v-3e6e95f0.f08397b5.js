(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[3530],{6795:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>p});const p={key:"v-3e6e95f0",path:"/guide/delegate.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"C#委托的介绍(delegate、Action、Func、predicate)",slug:"c-委托的介绍-delegate、action、func、predicate",children:[]},{level:2,title:"delegate",slug:"delegate",children:[]},{level:2,title:"Action",slug:"action",children:[]},{level:2,title:"Func",slug:"func",children:[]},{level:2,title:"Predicate",slug:"predicate",children:[]},{level:2,title:"事件",slug:"事件",children:[]},{level:2,title:"参考",slug:"参考",children:[]}],filePathRelative:"guide/delegate.md",git:{updatedTime:1614164783e3,contributors:[]}}},3180:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>u});var p=a(8133);const t=(0,p.uE)('<h2 id="c-委托的介绍-delegate、action、func、predicate"><a class="header-anchor" href="#c-委托的介绍-delegate、action、func、predicate">#</a> C#委托的介绍(delegate、Action、Func、predicate)</h2><p>委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递。事件是一种特殊的委托。</p><p>类似c++的函数指针，但是他是类型安全的，</p><ol><li>允许将方法作为参数传递。</li><li>可用于定义回调方法。</li><li>委托可以链接在一起。例如，可以对一个事件调用多个方法。</li></ol><h2 id="delegate"><a class="header-anchor" href="#delegate">#</a> delegate</h2><p>委托的关键字是 <strong>delegate</strong>,一个委托相当于一个新的类，可使用访问修饰符 public、private、protected等，作用域同类的修饰符.</p><p>定义了委托类型与参数,使得可以将方法当作另一个方法参数来传递。事件是一种特殊的委托。</p><p>Delegate至少0个参数，至多32个参数，可以无返回值，也可以指定返回值类型。</p><p>定义一个委托，有二个参数，并返回Int类型的值。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">CalculateMethodInvoker</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> a<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>定义方法,方法参数与返回值与委托保持一致</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculateHelper</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">Multiply</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>调用</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name">CalculateMethodInvoker</span> calculateSumInvoker <span class="token operator">=</span> CalculateHelper<span class="token punctuation">.</span>Sum<span class="token punctuation">;</span>\n        <span class="token class-name">CalculateMethodInvoker</span> calculateSumInvoker2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">CalculateMethodInvoker</span><span class="token punctuation">(</span>CalculateHelper<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化一个委托</span>\n        <span class="token class-name">CalculateMethodInvoker</span> calculateMultiplyInvoker <span class="token operator">=</span> CalculateHelper<span class="token punctuation">.</span>Multiply<span class="token punctuation">;</span>\n\n        <span class="token class-name"><span class="token keyword">int</span></span> x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n        <span class="token class-name"><span class="token keyword">int</span></span> addResult <span class="token operator">=</span> <span class="token function">calculateSumInvoker</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">int</span></span> addResult2 <span class="token operator">=</span> <span class="token function">calculateSumInvoker2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name"><span class="token keyword">int</span></span> invokeResult <span class="token operator">=</span> calculateSumInvoker<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;x,y相加，得到</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">addResult</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">addResult2</span><span class="token punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">invokeResult</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;x,y相乘，得到</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp"><span class="token function">calculateMultiplyInvoker</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>一个委托可以将多个方法链接在一起。也可以移除某个方法</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>public static void ContactDelegate()\n{\n    CalculateMethodInvoker calculateInvoker = CalculateHelper.Sum;\n    calculateInvoker += CalculateHelper.Multiply;\n\n    int r1 = calculateInvoker(10, 20);\n    Console.WriteLine($&quot;ContactDelegate:{r1}&quot;);\n\n    calculateInvoker -= CalculateHelper.Multiply;\n    int r2 = calculateInvoker(10, 20);\n    Console.WriteLine($&quot;ContactDelegate:{r2}&quot;);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="action"><a class="header-anchor" href="#action">#</a> Action</h2><p>Action是无返回值的泛型委托。特点是：至少0个参数，至多16个参数，无返回值。</p><ol><li>调用方法、可以传入参数</li></ol><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ActionParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Sum</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> x<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">int</span></span> y<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;x+y=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x <span class="token operator">+</span> y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ol start="2"><li>使用lambda表达式</li></ol><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ActionLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Action<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> action <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;x+y=</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">x <span class="token operator">+</span> y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token function">action</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="func"><a class="header-anchor" href="#func">#</a> Func</h2><p>Func是有返回值的泛型委托，Func特点：至少0个参数，至多16个参数，根据返回值泛型返回。必须有返回值，不可void</p><p><code>Func&lt;int</code>&gt; 表示无参，返回值为int的委托</p><p><code>Func&lt;int, int, string&gt;</code> 表示传入参数为int, int。 返回值为string的委托</p><p>1.调用方法，传入参数</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FuncMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> fc1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>CalculateHelper<span class="token punctuation">.</span>Sum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">int</span></span> result <span class="token operator">=</span> <span class="token function">fc1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用委托</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>2.使用lambda</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FuncLambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Func<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> fc <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token keyword">string</span></span> r <span class="token operator">=</span> <span class="token function">fc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="predicate"><a class="header-anchor" href="#predicate">#</a> Predicate</h2><p>predicate 是返回bool型的泛型委托</p><p><code> predicate&lt;int&gt;</code> 表示传入参数为int 返回bool的委托</p><p>Predicate有且只有一个参数，返回值固定为bool</p><p>1、使用单行lambda,带括号的lambda（可多行代码），独立的方法。都返回bool类型的值。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">PredicateBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">Point<span class="token punctuation">[</span><span class="token punctuation">]</span></span> points <span class="token operator">=</span> <span class="token punctuation">{</span> \n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">375</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">275</span><span class="token punctuation">,</span> <span class="token number">395</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Point</span><span class="token punctuation">(</span><span class="token number">295</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate<span class="token punctuation">&lt;</span>Point<span class="token punctuation">&gt;</span></span> predicate1 <span class="token operator">=</span> p <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span>X <span class="token operator">*</span> p<span class="token punctuation">.</span>Y <span class="token operator">&gt;</span> <span class="token number">100000</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate<span class="token punctuation">&lt;</span>Point<span class="token punctuation">&gt;</span></span> predicate2 <span class="token operator">=</span> p <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>X <span class="token operator">*</span> p<span class="token punctuation">.</span>Y <span class="token operator">&gt;</span> <span class="token number">100000</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token class-name">Point</span> first <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> ProductGT10<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Point</span> p1 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> predicate1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Point</span> p2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> predicate2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Found: X = {0}, Y = {1}&quot;</span><span class="token punctuation">,</span> first<span class="token punctuation">.</span>X<span class="token punctuation">,</span> first<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Found: X = {0}, Y = {1}&quot;</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span>X<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;Found: X = {0}, Y = {1}&quot;</span><span class="token punctuation">,</span> p2<span class="token punctuation">.</span>X<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">ProductGT10</span><span class="token punctuation">(</span><span class="token class-name">Point</span> p<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>X <span class="token operator">*</span> p<span class="token punctuation">.</span>Y <span class="token operator">&gt;</span> <span class="token number">100000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>Array.Find方法，使用Predicate委托搜索Point结构的数组，只有是x和y 字段的乘积大于100000,方法ProductGT10返回true,找到符合要求的元素后停止。</p><h2 id="事件"><a class="header-anchor" href="#事件">#</a> 事件</h2><p><strong>事件自身就是委托类型</strong>，由于委托可以绑定调用多个方法，这会给事件的处理带来方便 。类只需要对外公开事件，就可以与外部的其他地方关联，从而实现事件订阅。</p><p>1.由于不同的事件要传递的参数不同，我们通过继承EventArgs，</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyPressEventArgs</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EventArgs</span></span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">ConsoleKey</span> PressdKey <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">KeyPressEventArgs</span><span class="token punctuation">(</span><span class="token class-name">ConsoleKey</span> consoleKey<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>PressdKey <span class="token operator">=</span> consoleKey<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li></li></ol><p>带有泛型参数的事件处理委托。</p><p>系统函数内置如下委托</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">EventHandler</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>TEventArgs<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">TEventArgs</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>   TEventArgs 是一个泛型参数\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">App</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">event</span> <span class="token class-name">EventHandler<span class="token punctuation">&lt;</span>KeyPressEventArgs<span class="token punctuation">&gt;</span></span> KeyPressed<span class="token punctuation">;</span>\n    <span class="token keyword">protected</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnSpaceKeyPressed</span><span class="token punctuation">(</span><span class="token class-name">KeyPressEventArgs</span> e<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        KeyPressed<span class="token punctuation">?.</span><span class="token function">Invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">StartRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token class-name">ConsoleKeyInfo</span> keyInfo <span class="token operator">=</span> Console<span class="token punctuation">.</span><span class="token function">ReadKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>keyInfo<span class="token punctuation">.</span>Key <span class="token operator">==</span> ConsoleKey<span class="token punctuation">.</span>Spacebar<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token function">OnSpaceKeyPressed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">KeyPressEventArgs</span><span class="token punctuation">(</span>keyInfo<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>keyInfo<span class="token punctuation">.</span>Key <span class="token operator">==</span> ConsoleKey<span class="token punctuation">.</span>Escape<span class="token punctuation">)</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">class</span> <span class="token class-name">Program</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;空格：输入当前时间&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;ESC:退出系统&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        \n        <span class="token class-name">App</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        app<span class="token punctuation">.</span>KeyPressed <span class="token operator">+=</span> MyApp_SpaceKeyPressed<span class="token punctuation">;</span>\n        app<span class="token punctuation">.</span><span class="token function">StartRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">MyApp_SpaceKeyPressed</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">object</span></span> sender<span class="token punctuation">,</span><span class="token class-name">KeyPressEventArgs</span> e<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">DateTime<span class="token punctuation">.</span>Now<span class="token punctuation">.</span><span class="token function">ToLongTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">按下空格键,</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">e<span class="token punctuation">.</span>PressdKey<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="参考"><a class="header-anchor" href="#参考">#</a> 参考</h2>',48),e={href:"https://www.cnblogs.com/akwwl/p/3232679.html",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("C#委托的介绍(delegate、Action、Func、predicate)"),o={href:"https://www.cnblogs.com/hjxzjp/p/7667536.html",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("c# 定义委托和使用委托（事件的使用）"),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.j4)(p.HY,null,[t,(0,p.Wm)("ul",null,[(0,p.Wm)("li",null,[(0,p.Wm)("a",e,[c,(0,p.Wm)(a)])]),(0,p.Wm)("li",null,[(0,p.Wm)("a",o,[l,(0,p.Wm)(a)])])])],64)}}}}]);