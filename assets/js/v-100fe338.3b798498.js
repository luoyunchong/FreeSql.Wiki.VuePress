(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[5221],{6995:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-100fe338",path:"/guide/more.html",title:"你不知道的功能✨",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1、备注 -&gt; 迁移到数据库",slug:"_1、备注-迁移到数据库",children:[]},{level:2,title:"2、NoneParameter",slug:"_2、noneparameter",children:[]},{level:2,title:"3、添加或修改",slug:"_3、添加或修改",children:[]},{level:2,title:"4、WithSql",slug:"_4、withsql",children:[]},{level:2,title:"5、你不知道的，指定字段返回",slug:"_5、你不知道的-指定字段返回",children:[]},{level:2,title:"6、Dto 映射查询",slug:"_6、dto-映射查询",children:[]},{level:2,title:"7、父子关系表",slug:"_7、父子关系表",children:[]},{level:2,title:"8、级联加载",slug:"_8、级联加载",children:[]},{level:2,title:"9、WhereCascade",slug:"_9、wherecascade",children:[]},{level:2,title:"10、WhereDynamicFilter",slug:"_10、wheredynamicfilter",children:[]},{level:2,title:"11、ISelect.ToDelete、ISelect.ToUpdate",slug:"_11、iselect-todelete、iselect-toupdate",children:[]},{level:2,title:"12、保存多对多数据 SaveMany",slug:"_12、保存多对多数据-savemany",children:[{level:3,title:"本功能：",slug:"本功能",children:[]}]},{level:2,title:"13、自定义表达式函数",slug:"_13、自定义表达式函数",children:[]},{level:2,title:"17、Ado.Net 扩展方法",slug:"_17、ado-net-扩展方法",children:[]}],filePathRelative:"guide/more.md",git:{updatedTime:1614165261e3,contributors:[]}}},451:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>l});var t=a(8133);const p=(0,t.uE)('<h1 id="你不知道的功能✨"><a class="header-anchor" href="#你不知道的功能✨">#</a> 你不知道的功能✨</h1><h2 id="_1、备注-迁移到数据库"><a class="header-anchor" href="#_1、备注-迁移到数据库">#</a> 1、备注 -&gt; 迁移到数据库</h2><p>FreeSql CodeFirst 支持将 c# 代码内的注释，迁移至数据库的备注。先决条件：</p><p>1、实体类所在程序集，需要开启 xml 文档功能；</p><p>2、xml 文件必须与程序集同目录，且文件名：xxx.dll -&gt; xxx.xml；</p><blockquote><p>v1.5.0+ 版本增加了对 Description 特性的解析，优先级低于 c# 代码注释；</p></blockquote><hr><h2 id="_2、noneparameter"><a class="header-anchor" href="#_2、noneparameter">#</a> 2、NoneParameter</h2><p>这个方法可以设置不使用 参数化 执行 SQL 命令，方便开发调试。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_topic<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>Title<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>?Title0<span class="token punctuation">)</span>\n\n<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token punctuation">`</span>tb_topic<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>Title<span class="token punctuation">`</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;Title_1&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 new FreeSqlBuilder().UseNoneParameter(true) 可以全局设置。</p><p>在 单次 ISelect、IInsert、IDelete、IUpdate 上使用 NoneParameter() 设置单次生效。</p><hr><h2 id="_3、添加或修改"><a class="header-anchor" href="#_3、添加或修改">#</a> 3、添加或修改</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span><span class="token function">InsertOrUpdate</span><span class="token punctuation">(</span>实体<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',15),e=(0,t.Uk)("更多内容可参阅："),o=(0,t.Uk)("添加或修改"),c=(0,t.uE)('<hr><h2 id="_4、withsql"><a class="header-anchor" href="#_4、withsql">#</a> 4、WithSql</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Topic<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">WithSql</span><span class="token punctuation">(</span><span class="token string">&quot;select * from Topic where clicks &gt; ?val&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">//SELECT a.`Id`, a.`Clicks`, a.`CategoryId`, a.`Title`, a.`CreateTime` </span>\n<span class="token comment">//FROM (select * from Topic where clicks &gt; ?val) a </span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>WithSql 使用多次为 UNION ALL 查询</p></blockquote><hr><h2 id="_5、你不知道的-指定字段返回"><a class="header-anchor" href="#_5、你不知道的-指定字段返回">#</a> 5、你不知道的，指定字段返回</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>t1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span>\n        a<span class="token punctuation">.</span>Id<span class="token punctuation">,</span>\n        a<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>\n        cstitle <span class="token operator">=</span> <span class="token string">&quot;substr(a.title, 0, 2)&quot;</span><span class="token punctuation">,</span> <span class="token comment">//将 substr(a.title, 0, 2) 作为查询字段</span>\n        csnow <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToDateTime</span><span class="token punctuation">(</span><span class="token string">&quot;now()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//将 now() 作为查询字段</span>\n        <span class="token comment">//奇思妙想：怎么查询开窗函数的结果</span>\n\n        count <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        max <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Max</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        min <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        name <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n\n        <span class="token comment">//可以直接映射一个导航属性</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><hr><h2 id="_6、dto-映射查询"><a class="header-anchor" href="#_6、dto-映射查询">#</a> 6、Dto 映射查询</h2><p>映射查询支持单表/多表，在查询数据之前映射（不是先查询所有字段再到内存映射）</p><p>规则：查找属性名，会循环内部对象 _tables（多表会增长），以 主表优先查，直到查到相同的字段。</p><p>如：</p><p>A, B, C 都有 id，Dto { id, a1, a2, b1, b2 }，A.id 被映射。也可以指定 id = C.id 映射。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ToList</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Dto<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//默认的映射查询，Dto 与 Song 属性名相同的被查询</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DTO</span> <span class="token punctuation">{</span> xxx <span class="token operator">=</span> a<span class="token punctuation">.</span>ext <span class="token punctuation">}</span><span class="token punctuation">)</span> \n<span class="token comment">//情况1：附加所有映射，再额外映射 ext，返回 List&lt;DTO&gt;</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Song</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> a<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span> \n<span class="token comment">//情况2：只查询 id，返回 List&lt;Song&gt;</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> a<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span> \n<span class="token comment">//情况3：只查询 id，返回 List&lt;匿名对象&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>请仔细处理区别，请仔细处理区别，请仔细处理区别</p></blockquote><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DTO</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">//情况4：只查询 id，返回 List&lt;DTO&gt;</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">DTO</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span> xxx <span class="token operator">=</span> a<span class="token punctuation">.</span>ext <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//情况5：查询 id, ext，返回 List&lt;DTO&gt;</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Song</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">//情况6：查询 id，返回 List&lt;Song&gt;</span>\n\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Song<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Song</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span> xxx <span class="token operator">=</span> a<span class="token punctuation">.</span>ext <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">//情况7：查询 id, ext，返回 List&lt;Song&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>GroupBy 所有方法不使用 DTO 映射规则</p></blockquote><hr><h2 id="_7、父子关系表"><a class="header-anchor" href="#_7、父子关系表">#</a> 7、父子关系表</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">List<span class="token punctuation">&lt;</span>Category<span class="token punctuation">&gt;</span></span> t2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Select<span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List<span class="token punctuation">&lt;</span>Category<span class="token punctuation">&gt;</span></span> t3 <span class="token operator">=</span> fsql<span class="token punctuation">.</span>Select<span class="token operator">&lt;</span>Category<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">&quot;家电&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//v1.6.0 AsTreeCte() 递归CTE查询 家电 下的所有子分类</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ToTreeList 查询数据后加工为树型，注意：实体需要配置父子导航属性</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">//返回 AsTreeCte() 树状层级信息</span>\nt4 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>Code <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> item <span class="token operator">=</span> a<span class="token punctuation">,</span> level <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token string">&quot;a.cte_level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&quot;a.cte_path&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> t4<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 北京市[110100]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 东城区[110101]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_8、级联加载"><a class="header-anchor" href="#_8、级联加载">#</a> 8、级联加载</h2><p>有设置导航属性关系的（支持一对多、多对多）：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Goods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>未设置导航属性关系的，临时指定关系（只支持一对多）：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Goods<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Comment<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> b<span class="token punctuation">.</span>TagId <span class="token operator">==</span> a<span class="token punctuation">.</span>Id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只查询每项子集合的前几条数据，避免像EfCore加载所有数据导致IO性能低下（比如某商品下有2000条评论）：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Goods<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Comment<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在 Dto 上做映射 IncludeMany：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token comment">//定义临时类，也可以是 Dto 类</span>\n<span class="token keyword">class</span> <span class="token class-name">Dto</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> TypeId <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Goods <span class="token punctuation">&gt;</span></span> GoodsList <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//查询 Goods 商品表，分类1、分类2、分类3 各10条数据</span>\n<span class="token class-name"><span class="token keyword">var</span></span> dto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dto</span> <span class="token punctuation">{</span> TypeId <span class="token operator">=</span> a <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndto<span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>d <span class="token operator">=&gt;</span> d<span class="token punctuation">.</span>GoodsList<span class="token punctuation">.</span><span class="token function">Take</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>gd <span class="token operator">=&gt;</span> gd<span class="token punctuation">.</span>TypeId <span class="token operator">==</span> d<span class="token punctuation">.</span>TypeId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//执行后，dto 每个元素.Vods 将只有 10条记录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>查询子集合表的部分字段，避免子集合字段过多的问题：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">IncludeMany</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Goods<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>b <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Goods</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> b<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> Title <span class="token operator">=</span> b<span class="token punctuation">.</span>Title <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//只查询 goods 表 id, title 字段，再作填充</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="_9、wherecascade"><a class="header-anchor" href="#_9、wherecascade">#</a> 9、WhereCascade</h2><p>多表查询时，像isdeleted每个表都给条件，挺麻烦的。WhereCascade使用后生成sql时，所有表都附上这个条件。</p><p>如：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>t1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">LeftJoin</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>t2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">WhereCascade</span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span>IsDeleted <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>得到的 SQL：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">FROM</span> t1\n<span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t2 <span class="token keyword">on</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>t2<span class="token punctuation">.</span>IsDeleted <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> \n<span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>IsDeleted <span class="token operator">=</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>实体可附加表达式时才生效，支持子表查询。单次查询使用的表数目越多收益越大。</p><hr><h2 id="_10、wheredynamicfilter"><a class="header-anchor" href="#_10、wheredynamicfilter">#</a> 10、WhereDynamicFilter</h2><p>ISelect.WhereDynamicFilter 方法实现动态过滤条件（与前端交互），支持的操作符：</p><ul><li>Contains/StartsWith/EndsWith/NotContains/NotStartsWith/NotEndsWith：包含/不包含，like &#39;%xx%&#39;，或者 like &#39;xx%&#39;，或者 like &#39;%xx&#39;</li><li>Equal/NotEqual：等于/不等于</li><li>GreaterThan/GreaterThanOrEqual：大于/大于等于</li><li>LessThan/LessThanOrEqual：小于/小于等于</li><li>Range：范围查询</li><li>DateRange：日期范围，有特殊处理 value[1] + 1</li><li>Any/NotAny：是否符合 value 中任何一项（直白的说是 SQL IN）</li></ul><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name">DynamicFilterInfo</span> dyfilter <span class="token operator">=</span> JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DynamicFilterInfo<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">@&quot;\n{\n  &quot;&quot;Logic&quot;&quot; : &quot;&quot;Or&quot;&quot;,\n  &quot;&quot;Filters&quot;&quot; :\n  [\n    {\n      &quot;&quot;Field&quot;&quot; : &quot;&quot;Code&quot;&quot;,\n      &quot;&quot;Operator&quot;&quot; : &quot;&quot;NotContains&quot;&quot;,\n      &quot;&quot;Value&quot;&quot; : &quot;&quot;val1&quot;&quot;,\n      &quot;&quot;Filters&quot;&quot; :\n      [\n        {\n          &quot;&quot;Field&quot;&quot; : &quot;&quot;Name&quot;&quot;,\n          &quot;&quot;Operator&quot;&quot; : &quot;&quot;NotStartsWith&quot;&quot;,\n          &quot;&quot;Value&quot;&quot; : &quot;&quot;val2&quot;&quot;,\n        }\n      ]\n    },\n    {\n      &quot;&quot;Field&quot;&quot; : &quot;&quot;Parent.Code&quot;&quot;,\n      &quot;&quot;Operator&quot;&quot; : &quot;&quot;Eq&quot;&quot;,\n      &quot;&quot;Value&quot;&quot; : &quot;&quot;val11&quot;&quot;,\n      &quot;&quot;Filters&quot;&quot; :\n      [\n        {\n          &quot;&quot;Field&quot;&quot; : &quot;&quot;Parent.Name&quot;&quot;,\n          &quot;&quot;Operator&quot;&quot; : &quot;&quot;Contains&quot;&quot;,\n          &quot;&quot;Value&quot;&quot; : &quot;&quot;val22&quot;&quot;,\n        }\n      ]\n    }\n  ]\n}\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>VM_District_Parent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WhereDynamicFilter</span><span class="token punctuation">(</span>dyfilter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//SELECT a.&quot;&quot;Code&quot;&quot;, a.&quot;&quot;Name&quot;&quot;, a.&quot;&quot;ParentCode&quot;&quot;, a__Parent.&quot;&quot;Code&quot;&quot; as4, a__Parent.&quot;&quot;Name&quot;&quot; as5, a__Parent.&quot;&quot;ParentCode&quot;&quot; as6 </span>\n<span class="token comment">//FROM &quot;&quot;D_District&quot;&quot; a </span>\n<span class="token comment">//LEFT JOIN &quot;&quot;D_District&quot;&quot; a__Parent ON a__Parent.&quot;&quot;Code&quot;&quot; = a.&quot;&quot;ParentCode&quot;&quot; </span>\n<span class="token comment">//WHERE (not((a.&quot;&quot;Code&quot;&quot;) LIKE &#39;%val1%&#39;) AND not((a.&quot;&quot;Name&quot;&quot;) LIKE &#39;val2%&#39;) OR a__Parent.&quot;&quot;Code&quot;&quot; = &#39;val11&#39; AND (a__Parent.&quot;&quot;Name&quot;&quot;) LIKE &#39;%val22%&#39;)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><hr><h2 id="_11、iselect-todelete、iselect-toupdate"><a class="header-anchor" href="#_11、iselect-todelete、iselect-toupdate">#</a> 11、ISelect.ToDelete、ISelect.ToUpdate</h2><p>默认 IDelete 不支持导航对象，多表关联等。ISelect.ToDelete 可将查询转为删除对象，以便支持导航对象或其他查询功能删除数据，如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Options<span class="token punctuation">.</span>xxx <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注意：此方法不是将数据查询到内存循环删除，上面的代码产生如下 SQL 执行：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token punctuation">`</span>T1<span class="token punctuation">`</span> <span class="token keyword">WHERE</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> a<span class="token punctuation">.</span>id <span class="token keyword">from</span> T1 a <span class="token keyword">left</span> <span class="token keyword">join</span> Options b <span class="token keyword">on</span> b<span class="token punctuation">.</span>t1id <span class="token operator">=</span> a<span class="token punctuation">.</span>id <span class="token keyword">where</span> b<span class="token punctuation">.</span>xxx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>复杂删除使用该方案的好处：</p><ul><li>删除前可预览测试数据，防止错误删除操作；</li><li>支持更加复杂的删除操作（IDelete 默认只支持简单的操作），甚至在 ISelect 上使用 Limit(10) 将只删除附合条件的前 10条记录；</li></ul><blockquote><p>ISelect.ToUpdate 操作类似</p></blockquote><hr><h2 id="_12、保存多对多数据-savemany"><a class="header-anchor" href="#_12、保存多对多数据-savemany">#</a> 12、保存多对多数据 SaveMany</h2><p>之前：</p><p>FreeSql.DbContext 和 仓储实现，已经实现了联级保存功能，联级保存功能可实现保存对象的时候，将其【OneToMany】、【ManyToMany】导航属性集合也一并保存。</p><p>全局关闭：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token function">SetDbContextOptions</span><span class="token punctuation">(</span>opt <span class="token operator">=&gt;</span> opt<span class="token punctuation">.</span>EnableAddOrUpdateNavigateList <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>局部关闭：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span>DbContextOptions<span class="token punctuation">.</span>EnableAddOrUpdateNavigateList <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="本功能"><a class="header-anchor" href="#本功能">#</a> 本功能：</h3><p>保存实体的指定【一对多】、【多对多】导航属性，SaveMany 方法实现在 BaseRepository、DbContext。</p><p>解决问题：当实体类导航数据过于复杂的时候，选择关闭联级保存的功能是明智之选，但是此时【一对多】、【多对多】数据保存功能写起来非常繁琐麻烦（与现有数据对比后保存）。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> song <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Song</span> <span class="token punctuation">{</span> Id <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\nsong<span class="token punctuation">.</span>Tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Tag<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsong<span class="token punctuation">.</span>Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tag <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsong<span class="token punctuation">.</span>Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tag <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsong<span class="token punctuation">.</span>Tags<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> Tag <span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span><span class="token function">SaveMany</span><span class="token punctuation">(</span>song<span class="token punctuation">,</span> <span class="token string">&quot;Tags&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//轻松保存 song 与 tag 表的关联</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>SaveMany【一对多】的机制是完整对比保存。</p><p>SaveMany【多对多】的机制规则与联级保存的一样，如下：</p><p>我们对中间表的保存是完整对比操作，对外部实体的操作只作新增（注意不会更新）</p><ul><li>属性集合为空时，删除他们的所有关联数据（中间表）</li><li>属性集合不为空时，与数据库存在的关联数据（中间表）完全对比，计算出应该删除和添加的记录</li></ul><hr><h2 id="_13、自定义表达式函数"><a class="header-anchor" href="#_13、自定义表达式函数">#</a> 13、自定义表达式函数</h2><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ExpressionCall</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DbFunc</span> <span class="token punctuation">{</span>\n  <span class="token comment">//必要定义 static + ThreadLocal</span>\n  <span class="token keyword">static</span> <span class="token class-name">ThreadLocal<span class="token punctuation">&lt;</span>ExpressionCallContext<span class="token punctuation">&gt;</span></span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">ThreadLocal<span class="token punctuation">&lt;</span>ExpressionCallContext<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">DateTime</span> <span class="token function">FormatDateTime</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">DateTime</span> that<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">string</span></span> arg1<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> up <span class="token operator">=</span> context<span class="token punctuation">.</span>Value<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>up<span class="token punctuation">.</span>DataType <span class="token operator">==</span> FreeSql<span class="token punctuation">.</span>DataType<span class="token punctuation">.</span>Sqlite<span class="token punctuation">)</span> <span class="token comment">//重写内容</span>\n      up<span class="token punctuation">.</span>Result <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$&quot;date_format(</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">up<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;that&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">up<span class="token punctuation">.</span>ParsedContent<span class="token punctuation">[</span><span class="token string">&quot;arg1&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">)&quot;</span></span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> that<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> sql1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SysModule<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToSql</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>CreateTime<span class="token punctuation">.</span><span class="token function">FormatDateTime</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//SELECT date_format(a.&quot;CreateTime&quot;, &#39;yyyy-MM-dd&#39;) as1 </span>\n<span class="token comment">//FROM &quot;SysModule&quot; a</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>[ExpressionCall] 特性可在静态扩展类上标记，也可以在单个静态方法上标记；</p><table><thead><tr><th>ExpressionCallContext 属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>DataType</td><td>FreeSql.DataType</td><td>用于实现不同数据库的适配判断条件</td></tr><tr><td>ParsedContent</td><td>Dictionary&lt;string, string&gt;</td><td>函数的各参数解析结果</td></tr><tr><td>DbParameter</td><td>DbParameter</td><td>that 被参数化的对象（有可能为 null)</td></tr><tr><td>UserParameters</td><td>List&lt;DbParameter&gt;</td><td>可附加参数化对象</td></tr><tr><td>Result</td><td>string</td><td>返回表达式函数表示的 SQL 字符串</td></tr></tbody></table><blockquote><p>当扩展方法返回值为 string 时，其返回值也可以当作 context.Value.Result 功能</p></blockquote><blockquote><p>当不想解析指定参数时，使用特性 [RawValue] 标记</p></blockquote><hr><h1 id="_14、自定义实体特性、与其他-orm-共用特性"><a class="header-anchor" href="#_14、自定义实体特性、与其他-orm-共用特性">#</a> 14、自定义实体特性、与其他 ORM 共用特性</h1><p>本功能可实现与其他 ORM 使用一套 Attribute，避免维护两份实体特性的烦恼：</p><blockquote><p>v1.4.0+ 已自动识别 EFCore 实体特性 Key/Required/NotMapped/MaxLength/StringLength/DatabaseGenerated/Table/Column</p></blockquote><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntity <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token class-name"><span class="token keyword">var</span></span> attr <span class="token operator">=</span> e<span class="token punctuation">.</span>EntityType<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyTableAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">MyTableAttribute</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> attr<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment">//表名</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nfsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>ConfigEntityProperty <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token class-name"><span class="token keyword">var</span></span> attr <span class="token operator">=</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span><span class="token function">GetCustomAttributes</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">MyColumnAttribute</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token class-name">MyColumnAttribute</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    e<span class="token punctuation">.</span>ModifyResult<span class="token punctuation">.</span>Name <span class="token operator">=</span> attr<span class="token punctuation">.</span>Name<span class="token punctuation">;</span> <span class="token comment">//字段名</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MyTable</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n<span class="token keyword">class</span> <span class="token class-name">YourEntity</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">MyColumn</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> pkid <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyTableAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token function">MyTableAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">MyColumnAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token function">MyColumnAttribute</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>Name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><hr><h1 id="_15、审计-curd"><a class="header-anchor" href="#_15、审计-curd">#</a> 15、审计 CURD</h1><p>如果因为某个 sql 骚操作耗时很高，没有一个相关的审计功能，排查起来可以说无从下手。</p><p>FreeSql 支持简单的类似功能：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>CurdAfter <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>ElapsedMilliseconds <span class="token operator">&gt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">//记录日志</span>\n\t\t<span class="token comment">//发送短信给负责人</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>只需要一个事件，就可以对全局起到作用。</p><p>还有一个 CurdBefore 在执行 sql 之前触发，常用于记录日志或开发调试。</p><hr><h1 id="_16、审计属性值"><a class="header-anchor" href="#_16、审计属性值">#</a> 16、审计属性值</h1><p>实现插入/更新时统一处理某些值，比如某属性的雪花算法值、创建时间值、甚至是业务值。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>AuditValue <span class="token operator">+=</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>Column<span class="token punctuation">.</span>CsType <span class="token operator">==</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">long</span></span><span class="token punctuation">)</span> \n        <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Property<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetCustomAttribute</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>SnowflakeAttribute<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span>\n        <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">?.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n        e<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Snowflake</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Snowflake</span></span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Id <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n    <span class="token comment">//...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>当属性的类型是 long，并且标记了 [Snowflake]，并且当前值是 0，那么在插入/更新时它的值将设置为雪花id值。</p><p>说明：SnowflakeAttribute 是使用者您来定义，new Snowflake().GetId() 也是由使用者您来实现</p><p>如果命名规范，可以在 aop 里判断，if (e.Property.Name == &quot;createtime&quot;) e.Value = DateTime.Now;</p><h2 id="_17、ado-net-扩展方法"><a class="header-anchor" href="#_17、ado-net-扩展方法">#</a> 17、Ado.Net 扩展方法</h2><p>提供了类似 Dapper 的使用方法，FreeSql 增加了 IDbConnection/IDbTransaction 对象的扩展方法 Select/Insert/Update/Delete 实现 CRUD。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">using</span> <span class="token namespace">FreeSql</span><span class="token punctuation">;</span>\n\n<span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> conn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">SqlConnection</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name">IFreeSql</span> fsql <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">GetIFreeSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span>IsNoneCommandParameter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    fsql<span class="token punctuation">.</span>CodeFirst<span class="token punctuation">.</span>IsSyncStructureToUpper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    fsql<span class="token punctuation">.</span>Aop<span class="token punctuation">.</span>CommandBefore <span class="token operator">+=</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Trace<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Command<span class="token punctuation">.</span>CommandText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//以上整个程序只需要设置一次</span>\n\n    conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    conn<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    conn<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    conn<span class="token punctuation">.</span><span class="token function">InsertOrUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    conn<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><ul><li>每个 SqlConnection GetFreeSql() 返回的 IFreeSql 实例相同；</li><li>可以对 fsql 设置 Aop 事件，比如监视 SQL；</li><li>IFreeSql 自身的成员 IDbFirst、Transaction 不可用；</li></ul><p>利用本功能可以快速将 FreeSql 使用到项目中，只需要处理好实体类的特性。</p><p>提示：FreeSql 兼容 EFCore 99% 的实体特性</p>',103),l={render:function(n,s){const a=(0,t.up)("RouterLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[p,(0,t.Wm)("blockquote",null,[(0,t.Wm)("p",null,[e,(0,t.Wm)(a,{to:"/guide/insert-or-update.html"},{default:(0,t.w5)((()=>[o])),_:1})])]),c],64)}}}}]);