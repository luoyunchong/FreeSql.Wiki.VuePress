(self.webpackChunkFreeSql_Wiki_VuePress=self.webpackChunkFreeSql_Wiki_VuePress||[]).push([[5372],{4721:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>t});const t={key:"v-52acee36",path:"/guide/select-as-tree.html",title:"树型查询✨",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"父子导航属性",slug:"父子导航属性",children:[]},{level:2,title:"1、ToTreeList",slug:"_1、totreelist",children:[]},{level:2,title:"2、AsTreeCte 递归删除",slug:"_2、astreecte-递归删除",children:[]},{level:2,title:"3、AsTreeCte 递归查询",slug:"_3、astreecte-递归查询",children:[]}],filePathRelative:"guide/select-as-tree.md",git:{updatedTime:1614165498e3,contributors:[]}}},282:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const t=(0,a(8133).uE)('<h1 id="树型查询✨"><a class="header-anchor" href="#树型查询✨">#</a> 树型查询✨</h1><p>无限级分类（父子）是一种比较常用的表设计，每种设计方式突出优势的同时也带来缺陷，如：</p><ul><li>方法1：表设计中只有 parent_id 字段，困扰：查询麻烦（本文可解决）；</li><li>方法2：表设计中冗余子级id便于查询，困扰：添加/更新/删除的时候需要重新计算；</li><li>方法3：表设计中存储左右值编码，困扰：同上；</li></ul><p>方法1设计最简单，本文解决它的递归查询问题，让使用透明化。</p><h2 id="父子导航属性"><a class="header-anchor" href="#父子导航属性">#</a> 父子导航属性</h2><p>FreeSql 导航属性之中，有针对父子关系的设置方式，如下：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Area</span>\n<span class="token punctuation">{</span>\n  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Column</span><span class="token attribute-arguments"><span class="token punctuation">(</span>IsPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Code <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> ParentCode <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ParentCode<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name">Area</span> Parent <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Navigate</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">nameof</span><span class="token punctuation">(</span>ParentCode<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token punctuation">]</span>\n  <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span> Childs <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>定义 Parent 属性，在表达式中可以这样：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Parent<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>定义 Childs 属性，在表达式中可以这样（子查询）：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Childs<span class="token punctuation">.</span><span class="token function">AsSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>定义 Childs 属性，还可以使用【级联保存】、【贪婪加载】等等操作。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Delete</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token string">&quot;1=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name"><span class="token keyword">var</span></span> repo <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetRepository</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span>DbContextOptions<span class="token punctuation">.</span>EnableAddOrUpdateNavigateList <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span>DbContextOptions<span class="token punctuation">.</span>NoneParameter <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\nrepo<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span>\n<span class="token punctuation">{</span>\n  Code <span class="token operator">=</span> <span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span>\n  Name <span class="token operator">=</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">,</span>\n  Childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span>\n    <span class="token punctuation">{</span>\n      Code <span class="token operator">=</span> <span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span>\n      Name <span class="token operator">=</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span>\n      Childs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span><span class="token punctuation">{</span> Code<span class="token operator">=</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;北京市&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Area</span><span class="token punctuation">{</span> Code<span class="token operator">=</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> Name <span class="token operator">=</span> <span class="token string">&quot;东城区&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_1、totreelist"><a class="header-anchor" href="#_1、totreelist">#</a> 1、ToTreeList</h2><p>配置好父子属性之后，就可以这样用了：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t1 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>查询数据本来是平面的，ToTreeList 方法将返回的平面数据在内存中加工为树型 List 返回。</p><h2 id="_2、astreecte-递归删除"><a class="header-anchor" href="#_2、astreecte-递归删除">#</a> 2、AsTreeCte 递归删除</h2><p>很常见的无限级分类表功能，删除树节点时，把子节点也处理一下。</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//删除 中国 下的所有记录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果软删除：</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code>fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>IsDeleted<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ExecuteAffrows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//软删除 中国 下的所有记录</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_3、astreecte-递归查询"><a class="header-anchor" href="#_3、astreecte-递归查询">#</a> 3、AsTreeCte 递归查询</h2><p>若不做数据冗余的无限级分类表设计，递归查询少不了，AsTreeCte 正是解决递归查询的封装，方法参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>(可选) pathSelector</td><td>路径内容选择，可以设置查询返回：中国 -&gt; 北京 -&gt; 东城区</td></tr><tr><td>(可选) up</td><td>false(默认)：由父级向子级的递归查询，true：由子级向父级的递归查询</td></tr><tr><td>(可选) pathSeparator</td><td>设置 pathSelector 的连接符，默认：-&gt;</td></tr><tr><td>(可选) level</td><td>设置递归层级</td></tr></tbody></table><blockquote><p>通过测试的数据库：MySql8.0、SqlServer、PostgreSQL、Oracle、Sqlite、Firebird、达梦、人大金仓</p></blockquote><p>姿势一：AsTreeCte() + ToTreeList</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t2 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//查询 中国 下的所有记录</span>\n  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToTreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//非必须，也可以使用 ToList（见姿势二）</span>\nAssert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Single</span><span class="token punctuation">(</span>t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Childs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// WITH &quot;as_tree_cte&quot;</span>\n<span class="token comment">// as</span>\n<span class="token comment">// (</span>\n<span class="token comment">// SELECT 0 as cte_level, a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>\n<span class="token comment">// FROM &quot;Area&quot; a </span>\n<span class="token comment">// WHERE (a.&quot;Name&quot; = &#39;中国&#39;)</span>\n\n<span class="token comment">// union all</span>\n\n<span class="token comment">// SELECT wct1.cte_level + 1 as cte_level, wct2.&quot;Code&quot;, wct2.&quot;Name&quot;, wct2.&quot;ParentCode&quot; </span>\n<span class="token comment">// FROM &quot;as_tree_cte&quot; wct1 </span>\n<span class="token comment">// INNER JOIN &quot;Area&quot; wct2 ON wct2.&quot;ParentCode&quot; = wct1.&quot;Code&quot;</span>\n<span class="token comment">// )</span>\n<span class="token comment">// SELECT a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>\n<span class="token comment">// FROM &quot;as_tree_cte&quot; a </span>\n<span class="token comment">// ORDER BY a.&quot;Code&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>姿势二：AsTreeCte() + ToList</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t3 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> t3<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//执行的 SQL 与姿势一相同</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>姿势三：AsTreeCte(pathSelector) + ToList</p><p>设置 pathSelector 参数后，如何返回隐藏字段？</p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> t4 <span class="token operator">=</span> fsql<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Select</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Area<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">==</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">AsTreeCte</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Name <span class="token operator">+</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">.</span>Code <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">OrderBy</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>Code<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span>a <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token punctuation">{</span> \n    item <span class="token operator">=</span> a<span class="token punctuation">,</span> \n    level <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span><span class="token string">&quot;a.cte_level&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n    path <span class="token operator">=</span> <span class="token string">&quot;a.cte_path&quot;</span> \n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> t4<span class="token punctuation">.</span>Count<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;100000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110000&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110100&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;110101&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">.</span>Code<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 北京市[110100]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\nAssert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span><span class="token string">&quot;中国[100000] -&gt; 北京[110000] -&gt; 东城区[110101]&quot;</span><span class="token punctuation">,</span> t4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// WITH &quot;as_tree_cte&quot;</span>\n<span class="token comment">// as</span>\n<span class="token comment">// (</span>\n<span class="token comment">// SELECT 0 as cte_level, a.&quot;Name&quot; || &#39;[&#39; || a.&quot;Code&quot; || &#39;]&#39; as cte_path, a.&quot;Code&quot;, a.&quot;Name&quot;, a.&quot;ParentCode&quot; </span>\n<span class="token comment">// FROM &quot;Area&quot; a </span>\n<span class="token comment">// WHERE (a.&quot;Name&quot; = &#39;中国&#39;)</span>\n\n<span class="token comment">// union all</span>\n\n<span class="token comment">// SELECT wct1.cte_level + 1 as cte_level, wct1.cte_path || &#39; -&gt; &#39; || wct2.&quot;Name&quot; || &#39;[&#39; || wct2.&quot;Code&quot; || &#39;]&#39; as cte_path, wct2.&quot;Code&quot;, wct2.&quot;Name&quot;, wct2.&quot;ParentCode&quot; </span>\n<span class="token comment">// FROM &quot;as_tree_cte&quot; wct1 </span>\n<span class="token comment">// INNER JOIN &quot;Area&quot; wct2 ON wct2.&quot;ParentCode&quot; = wct1.&quot;Code&quot;</span>\n<span class="token comment">// )</span>\n<span class="token comment">// SELECT a.&quot;Code&quot; as1, a.&quot;Name&quot; as2, a.&quot;ParentCode&quot; as5, a.cte_level as6, a.cte_path as7 </span>\n<span class="token comment">// FROM &quot;as_tree_cte&quot; a </span>\n<span class="token comment">// ORDER BY a.&quot;Code&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><blockquote><p>更多姿势...请根据代码注释进行尝试</p></blockquote>',34),p={render:function(n,s){return t}}}}]);